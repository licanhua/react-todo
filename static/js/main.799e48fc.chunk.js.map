{"version":3,"sources":["selectors/index.ts","slices/filter.ts","components/ToDoFilterButtons.tsx","container/ToDoFilter.tsx","slices/todos.ts","container/ToDoAdd.tsx","components/ToDoItem.tsx","container/ToDoList.tsx","App.tsx","reportWebVitals.ts","apis/index.ts","sagas/index.ts","slices/index.ts","store.ts","index.tsx"],"names":["toDoSelector","rootState","todo","filterSelector","filter","createSlice","name","initialState","showOption","reducers","setShowOption","state","payload","setFilter","actions","ToDoFilterButtons","useSelector","dispatch","useDispatch","ButtonGroup","value","map","radio","idx","ToggleButton","id","type","variant","checked","onChange","e","currentTarget","ToDoFilter","Container","className","Row","Col","sm","Form","Control","placeholder","target","todos","toDos","addToDo","length","push","completed","deleteToDo","item","toggleToDo","loadToDos","loadToDosSuccess","loadToDosError","saveToDos","ToDoAdd","useState","setTodo","size","onKeyPress","key","ToDoItem","ListGroup","Item","as","onClick","CloseButton","ToDoList","filterLowerCase","toLowerCase","filteredList","includes","App","useEffect","lg","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TODOS","apis","Promise","resolve","reject","localStorage","getItem","Array","isArray","JSON","parse","message","setItem","stringify","loadToDosSaga","saveToDosSaga","dataChangedSaga","rootSaga","call","api","put","select","todosState","all","takeLatest","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","devTools","process","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.799e48fc.chunk.js","sourcesContent":["import { RootState } from \"types\";\r\n\r\nexport const toDoSelector = (rootState: RootState) => rootState.todo;\r\nexport const filterSelector = (rootState: RootState) => rootState.filter;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { FilterState } from \"types\";\r\n\r\nexport const initialState: FilterState = {\r\n  showOption: \"all\",\r\n  filter: \"\",\r\n};\r\n\r\nconst filter = createSlice({\r\n  name: \"filter\",\r\n  initialState,\r\n  reducers: {\r\n    setShowOption: (\r\n      state,\r\n      { payload }: PayloadAction<typeof initialState.showOption>\r\n    ) => {\r\n      state.showOption = payload;\r\n    },\r\n    setFilter: (state, { payload }: PayloadAction<string>) => {\r\n      state.filter = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setShowOption, setFilter } = filter.actions;\r\nexport default filter.reducer;\r\n","import { ButtonGroup, ToggleButton } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { filterSelector } from \"selectors\";\r\nimport { setShowOption } from \"slices/filter\";\r\n\r\nexport const ToDoFilterButtons = () => {\r\n  const { showOption } = useSelector(filterSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const radios = [\r\n    { name: \"all\", value: \"all\" },\r\n    { name: \"active\", value: \"active\" },\r\n    { name: \"completed\", value: \"completed\" },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <ButtonGroup>\r\n        {radios.map((radio, idx) => (\r\n          <ToggleButton\r\n            key={idx}\r\n            id={`radio-${idx}`}\r\n            type=\"radio\"\r\n            variant=\"outline-success\"\r\n            name=\"radio\"\r\n            value={radio.value}\r\n            checked={showOption === radio.value}\r\n            onChange={(e) =>\r\n              dispatch(\r\n                setShowOption(e.currentTarget.value as typeof showOption)\r\n              )\r\n            }\r\n          >\r\n            {radio.name}\r\n          </ToggleButton>\r\n        ))}\r\n      </ButtonGroup>\r\n    </>\r\n  );\r\n};\r\n","import { ToDoFilterButtons } from \"components/ToDoFilterButtons\";\r\nimport React from \"react\";\r\nimport { Container, Form, Row, Col } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { filterSelector } from \"selectors\";\r\nimport { setFilter } from \"slices/filter\";\r\n\r\nexport const ToDoFilter = () => {\r\n  const { filter } = useSelector(filterSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Container className=\"mt-2 mb-2\">\r\n      <Row className=\"align-items-end\">\r\n        <Col sm={1} />\r\n        <Col>\r\n          <Form.Control\r\n            value={filter}\r\n            type=\"text\"\r\n            placeholder=\"type filter string here\"\r\n            onChange={(e) => {\r\n              dispatch(setFilter(e.target.value));\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <ToDoFilterButtons />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { ToDo, ToDosState } from \"types\";\r\n\r\nexport const initialState: ToDosState = {\r\n  todos: [],\r\n};\r\n\r\nconst toDos = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {\r\n    addToDo: (state, { payload }: PayloadAction<string>) => {\r\n      const id =\r\n        state.todos.length === 0\r\n          ? 1\r\n          : state.todos[state.todos.length - 1].id + 1;\r\n      state.todos.push({ id, todo: payload, completed: false });\r\n    },\r\n    deleteToDo: (state, { payload }: PayloadAction<number>) => {\r\n      state.todos = state.todos.filter((item) => item.id !== payload);\r\n    },\r\n    toggleToDo: (state, { payload }: PayloadAction<number>) => {\r\n      state.todos = state.todos.map((item) =>\r\n        item.id === payload ? { ...item, completed: !item.completed } : item\r\n      );\r\n    },\r\n    loadToDos: (state) => initialState,\r\n    loadToDosSuccess: (state, { payload }: PayloadAction<ToDo[]>) => {\r\n      state.todos = payload;\r\n    },\r\n    loadToDosError: (state) => initialState,\r\n    saveToDos: (state) => {},\r\n  },\r\n});\r\n\r\nexport const {\r\n  addToDo,\r\n  deleteToDo,\r\n  toggleToDo,\r\n  loadToDos,\r\n  loadToDosError,\r\n  loadToDosSuccess,\r\n  saveToDos,\r\n} = toDos.actions;\r\nexport default toDos.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addToDo } from \"slices/todos\";\r\n\r\nexport const ToDoAdd = () => {\r\n  const [todo, setTodo] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Container className=\"mt-2 mb-2\">\r\n      <Form.Control\r\n        size=\"lg\"\r\n        type=\"text\"\r\n        placeholder=\"Add todo here\"\r\n        value={todo}\r\n        onChange={(e) => {\r\n          setTodo(e.target.value);\r\n        }}\r\n        onKeyPress={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            if (todo !== \"\") {\r\n              dispatch(addToDo(todo));\r\n            }\r\n            setTodo(\"\");\r\n          }\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { CloseButton, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteToDo, toggleToDo } from \"slices/todos\";\r\nimport { ToDo } from \"types\";\r\n\r\nexport interface ToDoItemProperty {\r\n  todo: ToDo;\r\n}\r\n\r\nexport const ToDoItem: React.FC<ToDoItemProperty> = ({ todo }) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <ListGroup.Item as=\"li\" key={todo.id}>\r\n      <Row>\r\n        <Col onClick={() => dispatch(toggleToDo(todo.id))}>\r\n          {todo.completed && (\r\n            <p className=\"text-decoration-line-through\">{todo.todo}</p>\r\n          )}\r\n          {!todo.completed && <p>{todo.todo}</p>}\r\n        </Col>\r\n        <Col sm={1}>\r\n          <CloseButton onClick={() => dispatch(deleteToDo(todo.id))} />\r\n        </Col>\r\n      </Row>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n","import { ToDoItem } from \"components/ToDoItem\";\r\nimport React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { filterSelector, toDoSelector } from \"selectors\";\r\n\r\nexport const ToDoList = () => {\r\n  const { filter, showOption } = useSelector(filterSelector);\r\n  const { todos } = useSelector(toDoSelector);\r\n  const filterLowerCase = filter.toLowerCase();\r\n  const filteredList = todos.filter((todo) => {\r\n    if (showOption === \"completed\" && !todo.completed) {\r\n      return false;\r\n    }\r\n    if (showOption === \"active\" && todo.completed) {\r\n      return false;\r\n    }\r\n\r\n    if (filter !== \"\") {\r\n      return todo.todo.toLowerCase().includes(filterLowerCase);\r\n    }\r\n    return true;\r\n  });\r\n\r\n  return (\r\n    <ListGroup as=\"ul\">\r\n      {filteredList.map((todo) => (\r\n        <ToDoItem key={todo.id} todo={todo} />\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { ToDoFilter } from \"container/ToDoFilter\";\r\nimport { ToDoAdd } from \"container/ToDoAdd\";\r\nimport { ToDoList } from \"container/ToDoList\";\r\nimport { loadToDos } from \"slices/todos\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadToDos());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col lg=\"2\" xl=\"3\" />\r\n        <Col className=\"bg-info\">\r\n          <Container className=\"m-2\">\r\n            <h1 className=\"text-center\">ToDo App</h1>\r\n            <ToDoAdd />\r\n            <ToDoFilter />\r\n            <ToDoList />\r\n          </Container>\r\n        </Col>\r\n        <Col lg=\"2\" xl=\"3\" />\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { ToDo } from \"types\";\r\n\r\nconst TODOS = \"todos\";\r\nconst getToDos = () => {\r\n  return new Promise<ToDo[]>((resolve, reject) => {\r\n    const todos: any = localStorage.getItem(TODOS);\r\n    // check if there is any data in localstorage\r\n    if (!todos) {\r\n      resolve([]);\r\n    } else if (Array.isArray(JSON.parse(todos))) {\r\n      resolve(JSON.parse(todos));\r\n    } else {\r\n      reject({\r\n        message: \"Something went wrong\",\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nconst saveToDos = (todos: ToDo[]) => {\r\n  return new Promise<void>((resolve) => {\r\n    localStorage.setItem(TODOS, JSON.stringify(todos));\r\n    resolve();\r\n  });\r\n};\r\n\r\nconst apis = { loadToDos: getToDos, saveToDos };\r\nexport default apis;\r\n","import { all, call, put, select, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  addToDo,\r\n  deleteToDo,\r\n  loadToDos,\r\n  loadToDosError,\r\n  loadToDosSuccess,\r\n  saveToDos,\r\n  toggleToDo,\r\n} from \"slices/todos\";\r\nimport api from \"apis\";\r\nimport { ToDosState } from \"types\";\r\nimport { toDoSelector } from \"selectors\";\r\n\r\nexport function* loadToDosSaga(): any {\r\n  try {\r\n    const todos = yield call(api.loadToDos);\r\n    yield put(loadToDosSuccess(todos));\r\n  } catch {\r\n    yield put(loadToDosError());\r\n  }\r\n}\r\n\r\nexport function* saveToDosSaga(): any {\r\n  const todosState: ToDosState = yield select(toDoSelector);\r\n  yield call(api.saveToDos, todosState.todos);\r\n}\r\n\r\nexport function* dataChangedSaga() {\r\n  yield put(saveToDos());\r\n}\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    takeLatest(loadToDos, loadToDosSaga),\r\n    takeLatest(saveToDos, saveToDosSaga),\r\n    takeLatest(deleteToDo, dataChangedSaga),\r\n    takeLatest(addToDo, dataChangedSaga),\r\n    takeLatest(toggleToDo, dataChangedSaga),\r\n  ]);\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { RootState } from \"types\";\r\nimport filter from \"./filter\";\r\nimport todos from \"./todos\";\r\n\r\nconst rootReducer = combineReducers<RootState>({\r\n  todo: todos,\r\n  filter: filter,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { rootSaga } from \"sagas\";\r\nimport rootReducer from \"slices\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => [\r\n    sagaMiddleware,\r\n    ...getDefaultMiddleware({ thunk: false }),\r\n  ],\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}